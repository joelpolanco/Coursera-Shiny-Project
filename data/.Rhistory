combPredV <- predict(combModFit,predVDF)
predDF <- data.frame(rfp,gbmp,ldap,diagnosis=testing$diagnosis)
combModFit <- train(wage~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
combModFit <- train(diagnosis~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(testing$diagnosis, rfp)$overall['Accuracy']
confusionMatrix(testing$diagnosis, gbmp)$overall['Accuracy']
confusionMatrix(testing$diagnosis, ldap)$overall['Accuracy']
confusionMatrix(testing$diagnosis, combPred)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(concrete)
lasso <- train(CompressiveStrength ~ .,data=training, method = "lasso")
lp<- predict(lasso,testing)
?plot.enet
set.seed(233)
lasso <- train(CompressiveStrength ~ .,data=training, method = "lasso")
lp<- predict(lasso,testing)
plot.enet(lasso$finalModel, xvar="penalty", use.color=TRUE)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("c:Users/jgpolanc/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("c:/Users/jgpolanc/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
?bats()
?bats
View(training)
fit <- bats(training, use.parallel=FALSE)
plot(forecast(fit))
library(forecast)
fit <- bats(training, use.parallel=FALSE)
plot(forecast(fit))
?bats
fit <- bats(training$visitsTumblr)
plot(forecast(fit))
library(forecast)
library(quantmod)
# fit a model
fit <- bats(tstrain)
# check how long the test set is, so you can predict beyond trainign
h <- dim(testing)[1]
# forecast the model for remaining time points
fcast <- forecast(fit, level = 95, h = h)
# get the accuracy
accuracy(fcast, testing$visitsTumblr)
# check what percentage of times that the actual number of visitors was within
# 95% confidence interval
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
##
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
results <- c(accsvm[2], accsvmRadial[2], accsvmLinear[2], accsvmPoly[2], accsvmRadial[2], accsvmRadialCost[2])
modelFit4<- svm(CompressiveStrength~.,data=training)
result4<- predict(modelFit4,testing)
accuracy(result4,testing$CompressiveStrength)
install.packages("RODBC")
library('RODBC')
dbhandle <- odbcConnect("ImpalaDSN;pwd=h546443150!!")
input<-sqlQuery(dbhandle, paste("SELECT count(*) FROM IAH_CRM_ANALYSIS.v_f_opp"))
close(dbhandle)
input
install.packages("rJava")
install.packages("RJDBC")
library('RJDBC')
library('RIAHImpala')
rimpala.init(libs='C:/Users/jgpolanc/Desktop/IAH_R/jar')
rimpala.connect('hdprd1.intel.com',
principal="AuthMech=4;SSLTrustStore=C:/Users/jgpolanc/Desktop/IAH_R/jar\\Intel_Root_CA_Chain.jks;SSLTrustStorePwd=changeit;UID=sys_segbi@AMR.CORP.INTEL.COM;PWD=ypaqj06@")
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x, x=slider(1,100)))
manipulate(plot(1:x), x=slider(1,100))
library(UsingR)
install.packages("UsingR")
myHist<- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
library(manipulate)
library(UsingR)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("shiny")
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Shiny Basic 2')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Shiny Basic 2')
devtools::install_github('rstudio/shinyapps')
install.packages("rsconnect")
devtools::install_github('rstudio/rsconnect')
?rsconnect
install.packages("googleVis")
library("devtools")
install_github("ropensci/plotly")
library(plotly)
install_github("ropensci/plotly")
install.packages("curl")
install_github("ropensci/plotly")
library("devtools")
install_github("ropensci/plotly")
library(plotly)
library("devtools")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
df <- read.table("CDNOW_sample.txt",header=F)
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
df <- read.table("CDNOW_sample.txt",header=F)
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
# read CDNOW_SAMPLE.txt
df <- read.table("CDNOW_sample.txt",header=F)
# construct a data frame with the necessary columns of customer ID, transaction date, and money amount paid by a customer per transaction
df <- as.data.frame(cbind(df[,1],df[,3],df[,5]))
# add appropriate column names for the above three column and
names <- c("ID","Date","Amount")
names(df) <- names
#tranfer the the text column type to date type
df[,2] <- as.Date(as.character(df[,2]),"%Y%m%d")
#df<-cbind(df,Month)
#head(df)
#order the dataframe by customer ID and transcation date
df <- df[order(df$ID,df$Date),]
#get the number of rows in the dataset
nrow<-nrow(df)
#record the number of days between a customer's each transcation, say 10 days between 1st purchase and the second, 15 days between the second and the third
Interval <-rep(0,times=nrow)
# record the # of a customer's each transaction say 1st transcation, 2nd transcation
Times <- rep(1,times=nrow)
# record the total number of a customer's transcations
TotalTimes <- rep(1,times=nrow)
#calculate the data for the above three vectors.
n<-2
for (i in 2 : nrow){
if (df[i,"ID"] == df[i-1,"ID"]){
Interval[i] <- as.numeric(difftime(df[i,"Date"],df[i-1,"Date"],units="days"))
Times[i] <- n
n <- n+1
}else{
TotalTimes[(i-n+1) : (i-1)] <- n-1
n<-2
}
}
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
View(df)
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
# read CDNOW_SAMPLE.txt
df <- read.table("CDNOW_sample.txt",header=F)
# construct a data frame with the necessary columns of customer ID, transaction date, and money amount paid by a customer per transaction
df <- as.data.frame(cbind(df[,1],df[,3],df[,5]))
# add appropriate column names for the above three column and
names <- c("ID","Date","Amount")
names(df) <- names
#tranfer the the text column type to date type
df[,2] <- as.Date(as.character(df[,2]),"%Y%m%d")
#df<-cbind(df,Month)
#head(df)
#order the dataframe by customer ID and transcation date
df <- df[order(df$ID,df$Date),]
#get the number of rows in the dataset
nrow<-nrow(df)
#record the number of days between a customer's each transcation, say 10 days between 1st purchase and the second, 15 days between the second and the third
Interval <-rep(0,times=nrow)
# record the # of a customer's each transaction say 1st transcation, 2nd transcation
Times <- rep(1,times=nrow)
# record the total number of a customer's transcations
TotalTimes <- rep(1,times=nrow)
#calculate the data for the above three vectors.
n<-2
for (i in 2 : nrow){
if (df[i,"ID"] == df[i-1,"ID"]){
Interval[i] <- as.numeric(difftime(df[i,"Date"],df[i-1,"Date"],units="days"))
Times[i] <- n
n <- n+1
}else{
TotalTimes[(i-n+1) : (i-1)] <- n-1
n<-2
}
}
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
View(df)
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
# read CDNOW_SAMPLE.txt
df <- read.table("CDNOW_sample.txt",header=F)
# construct a data frame with the necessary columns of customer ID, transaction date, and money amount paid by a customer per transaction
df <- as.data.frame(cbind(df[,1],df[,3],df[,5]))
# add appropriate column names for the above three column and
names <- c("ID","Date","Amount")
names(df) <- names
#tranfer the the text column type to date type
df[,2] <- as.Date(as.character(df[,2]),"%Y%m%d")
df<-cbind(df,Month)
View(df)
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
# read CDNOW_SAMPLE.txt
df <- read.table("CDNOW_sample.txt",header=F)
# construct a data frame with the necessary columns of customer ID, transaction date, and money amount paid by a customer per transaction
df <- as.data.frame(cbind(df[,1],df[,3],df[,5]))
# add appropriate column names for the above three column and
names <- c("ID","Date","Amount")
names(df) <- names
#tranfer the the text column type to date type
df[,2] <- as.Date(as.character(df[,2]),"%Y%m%d")
#head(df)
#order the dataframe by customer ID and transcation date
df <- df[order(df$ID,df$Date),]
#get the number of rows in the dataset
nrow<-nrow(df)
#record the number of days between a customer's each transcation, say 10 days between 1st purchase and the second, 15 days between the second and the third
Interval <-rep(0,times=nrow)
# record the # of a customer's each transaction say 1st transcation, 2nd transcation
Times <- rep(1,times=nrow)
# record the total number of a customer's transcations
TotalTimes <- rep(1,times=nrow)
#calculate the data for the above three vectors.
n<-2
for (i in 2 : nrow){
if (df[i,"ID"] == df[i-1,"ID"]){
Interval[i] <- as.numeric(difftime(df[i,"Date"],df[i-1,"Date"],units="days"))
Times[i] <- n
n <- n+1
}else{
TotalTimes[(i-n+1) : (i-1)] <- n-1
n<-2
}
}
#add the three vectors to the data frame
df <- cbind(df, Interval,Times,TotalTimes)
test_date <-
head(df)
# get the matrix of customer ID ~ the customer¡¯s total number of transactions
TimesByID <-as.data.frame(table(df$ID))
#get the matrix of total number of transactions ~ number of customers who have the total number
GroupByTimes <- as.data.frame(table(TimesByID$Freq))
names(GroupByTimes) <- c("Purchases","Customers")
#plot the number of the customers grouped by number of purchases
#plot(GroupByTimes,xlab="Total Number of Purchases",ylab="Number of Customers",pch=16,col="blue",type="o")
#text(2,1220,"1205")
#text(3,425,"406")
#text(4,220,"208")
#text(5,170,"150")
#text(6,120,"98")
#text(12,50,"10")
#text(30,50,"1")
num_single<-ggplot(data=GroupByTimes, aes(x=Purchases, y=Customers, fill = Purchases)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +xlab("Total Number of Purchases") + ylab("Number of Customers") +
ggtitle("Number of Customers vs. Number of Purchases")
# calculate the repeat purchase percentages
percentages<-round(GroupByTimes$Customers / 2357 ,3)
GroupByTimes$percentages <-round(GroupByTimes$Customers/2357,3)*100
GroupByTimes1 <- GroupByTimes[1:10,]
#barplot(percentages[1:10]*100,col="blue",main="Percentage of Customers Making (x) Purchases", xlab="Number of Purchases", ylab="Repeat Purchase Rate (%)",ylim=range(0:55),axisnames=TRUE,names.arg=GroupByTimes$Times[1:10])
per_single<-ggplot(data=GroupByTimes1, aes(x=Purchases,y=percentages,fill=Purchases))+
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +
xlab("Number of Purchases (x)") + ylab("Repeat Purchase Rate (%)") +
ggtitle("Percentage of Customers Making (x) Purchases")
# filter out the customers who made more than one purchase and their intervals between the 1st and the 2nd purchase
df2<-df[df$TotalTimes>=2 & Times==2,]
# see how many 2nd transactions
nrow(df2)
# get the mean days of customer latency
mean(df2$Interval)
View(TimesByID)
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
View(df)
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
# read CDNOW_SAMPLE.txt
df <- read.table("CDNOW_sample.txt",header=F)
# construct a data frame with the necessary columns of customer ID, transaction date, and money amount paid by a customer per transaction
df <- as.data.frame(cbind(df[,1],df[,3],df[,5]))
# add appropriate column names for the above three column and
names <- c("ID","Date","Amount")
names(df) <- names
#tranfer the the text column type to date type
df[,2] <- as.Date(as.character(df[,2]),"%Y%m%d")
#head(df)
#order the dataframe by customer ID and transcation date
df <- df[order(df$ID,df$Date),]
#get the number of rows in the dataset
nrow<-nrow(df)
nrow- as.data.frame(nrow)
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
library(ggplot2)
# set working directory
setwd("C:/Users/jgpolanc/Desktop/Coursera/C10/project/data")
# read CDNOW_SAMPLE.txt
df <- read.table("CDNOW_sample.txt",header=F)
# construct a data frame with the necessary columns of customer ID, transaction date, and money amount paid by a customer per transaction
df <- as.data.frame(cbind(df[,1],df[,3],df[,5]))
# add appropriate column names for the above three column and
names <- c("ID","Date","Amount")
names(df) <- names
#tranfer the the text column type to date type
df[,2] <- as.Date(as.character(df[,2]),"%Y%m%d")
#head(df)
#order the dataframe by customer ID and transcation date
df <- df[order(df$ID,df$Date),]
#get the number of rows in the dataset
nrow<-nrow(df)
#record the number of days between a customer's each transcation, say 10 days between 1st purchase and the second, 15 days between the second and the third
Interval <-rep(0,times=nrow)
# record the # of a customer's each transaction say 1st transcation, 2nd transcation
Times <- rep(1,times=nrow)
# record the total number of a customer's transcations
TotalTimes <- rep(1,times=nrow)
#calculate the data for the above three vectors.
n<-2
for (i in 2 : nrow){
if (df[i,"ID"] == df[i-1,"ID"]){
Interval[i] <- as.numeric(difftime(df[i,"Date"],df[i-1,"Date"],units="days"))
Times[i] <- n
n <- n+1
}else{
TotalTimes[(i-n+1) : (i-1)] <- n-1
n<-2
}
}
#add the three vectors to the data frame
df <- cbind(df, Interval,Times,TotalTimes)
test_date <-
head(df)
# get the matrix of customer ID ~ the customer¡¯s total number of transactions
TimesByID <-as.data.frame(table(df$ID))
#get the matrix of total number of transactions ~ number of customers who have the total number
GroupByTimes <- as.data.frame(table(TimesByID$Freq))
names(GroupByTimes) <- c("Purchases","Customers")
#plot the number of the customers grouped by number of purchases
#plot(GroupByTimes,xlab="Total Number of Purchases",ylab="Number of Customers",pch=16,col="blue",type="o")
#text(2,1220,"1205")
#text(3,425,"406")
#text(4,220,"208")
#text(5,170,"150")
#text(6,120,"98")
#text(12,50,"10")
#text(30,50,"1")
num_single<-ggplot(data=GroupByTimes, aes(x=Purchases, y=Customers, fill = Purchases)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +xlab("Total Number of Purchases") + ylab("Number of Customers") +
ggtitle("Number of Customers vs. Number of Purchases")
# calculate the repeat purchase percentages
percentages<-round(GroupByTimes$Customers / 2357 ,3)
GroupByTimes$percentages <-round(GroupByTimes$Customers/2357,3)*100
GroupByTimes1 <- GroupByTimes[1:10,]
#barplot(percentages[1:10]*100,col="blue",main="Percentage of Customers Making (x) Purchases", xlab="Number of Purchases", ylab="Repeat Purchase Rate (%)",ylim=range(0:55),axisnames=TRUE,names.arg=GroupByTimes$Times[1:10])
per_single<-ggplot(data=GroupByTimes1, aes(x=Purchases,y=percentages,fill=Purchases))+
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE) +
xlab("Number of Purchases (x)") + ylab("Repeat Purchase Rate (%)") +
ggtitle("Percentage of Customers Making (x) Purchases")
# filter out the customers who made more than one purchase and their intervals between the 1st and the 2nd purchase
df2<-df[df$TotalTimes>=2 & Times==2,]
# see how many 2nd transactions
nrow(df2)
# get the mean days of customer latency
mean(df2$Interval)
# take a look at the distributions of the Customer Latency
#hist(df2$Interval,main="Distribution of Customer Latency (1st - 2nd purchase)", xlab="Days", ylab="Number of 2nd Transactions")
latent<-ggplot(data=df2, aes(df2$Interval)) + geom_histogram(breaks=seq(0, 500, by=50), colour = "white")
+ xlab("Days") + ylab("Number of 2nd Transactions") + ggtitle("Distribution of Customer Latency (1st - 2nd purchase)")
## Taking Action on the data, generate a list based on an input date
df3<-df[df$TotalTimes==1,]
nrow3<-nrow(df3)
test_date <- as.Date("1997-03-01")
for (i in 1:nrow3){
df3[i,"Interval"] <- as.numeric(difftime(test_date,df3[i,"Date"],units="days"))
}
#filter out where interval > 50 days
df4<-df3[df3$Interval>=50,]
df4<-df4[order(-df4$Amount),]
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
# get the matrix of customer ID ~ the customer¡¯s total number of transactions
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Quiz 1')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Quiz 1')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
shiny::runApp('C:/Users/jgpolanc/Desktop/Coursera/C10/Project')
